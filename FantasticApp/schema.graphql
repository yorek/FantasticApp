schema {
  query: Query
  mutation: Mutation
}

enum OrderBy {
  ASC
  DESC
}

input DefaultValue {
  Byte: Byte
  Short: Short
  Int: Int
  Long: Long
  String: String
  Boolean: Boolean
  Single: Single
  Float: Float
  Decimal: Decimal
  DateTime: DateTime
  ByteArray: ByteArray
  LocalTime: LocalTime
}

type WeatherReading {
  Id: Int!
  Date: DateTime!
  TemperatureC: Int!
  Summary: String
}

type Counter {
  id: Int!
  value: Int!
}

"Order by input for WeatherReading GraphQL type"
input WeatherReadingOrderByInput {
  "Order by options for Id"
  Id: OrderBy
  "Order by options for Date"
  Date: OrderBy
  "Order by options for TemperatureC"
  TemperatureC: OrderBy
  "Order by options for Summary"
  Summary: OrderBy
  "Conditions to be treated as AND operations"
  and: [WeatherReadingOrderByInput]
  "Conditions to be treated as OR operations"
  or: [WeatherReadingOrderByInput]
}

"Input type for adding Int filters"
input IntFilterInput {
  "Equals"
  eq: Int
  "Greater Than"
  gt: Int
  "Greater Than or Equal To"
  gte: Int
  "Less Than"
  lt: Int
  "Less Than or Equal To"
  lte: Int
  "Not Equals"
  neq: Int
  "Not null test"
  isNull: Boolean
}

"Input type for adding DateTime filters"
input DateTimeFilterInput {
  "Equals"
  eq: DateTime
  "Greater Than"
  gt: DateTime
  "Greater Than or Equal To"
  gte: DateTime
  "Less Than"
  lt: DateTime
  "Less Than or Equal To"
  lte: DateTime
  "Not Equals"
  neq: DateTime
  "Not null test"
  isNull: Boolean
}

"Input type for adding String filters"
input StringFilterInput {
  "Equals"
  eq: String
  "Contains"
  contains: String
  "Not Contains"
  notContains: String
  "Starts With"
  startsWith: String
  "Ends With"
  endsWith: String
  "Not Equals"
  neq: String
  "Case Insensitive"
  caseInsensitive: Boolean = false
  "Is null test"
  isNull: Boolean
}

"Filter input for WeatherReading GraphQL type"
input WeatherReadingFilterInput {
  "Filter options for Id"
  Id: IntFilterInput
  "Filter options for Date"
  Date: DateTimeFilterInput
  "Filter options for TemperatureC"
  TemperatureC: IntFilterInput
  "Filter options for Summary"
  Summary: StringFilterInput
  "Conditions to be treated as AND operations"
  and: [WeatherReadingFilterInput]
  "Conditions to be treated as OR operations"
  or: [WeatherReadingFilterInput]
}

"Order by input for Counter GraphQL type"
input CounterOrderByInput {
  "Order by options for id"
  id: OrderBy
  "Order by options for value"
  value: OrderBy
  "Conditions to be treated as AND operations"
  and: [CounterOrderByInput]
  "Conditions to be treated as OR operations"
  or: [CounterOrderByInput]
}

"Filter input for Counter GraphQL type"
input CounterFilterInput {
  "Filter options for id"
  id: IntFilterInput
  "Filter options for value"
  value: IntFilterInput
  "Conditions to be treated as AND operations"
  and: [CounterFilterInput]
  "Conditions to be treated as OR operations"
  or: [CounterFilterInput]
}

type Query {
  "Get a list of all the WeatherReading items from the database"
  weatherReadings("The number of items to return from the page start point" first: Int "A pagination token from a previous query to continue through a paginated list" after: String "Filter options for query" filter: WeatherReadingFilterInput "Ordering options for query" orderBy: WeatherReadingOrderByInput): WeatherReadingConnection!
  "Get a WeatherReading from the database by its ID\/primary key"
  weatherReading_by_pk(Id: Int!): WeatherReading
  "Get a list of all the Counter items from the database"
  counters("The number of items to return from the page start point" first: Int "A pagination token from a previous query to continue through a paginated list" after: String "Filter options for query" filter: CounterFilterInput "Ordering options for query" orderBy: CounterOrderByInput): CounterConnection!
  "Get a Counter from the database by its ID\/primary key"
  counter_by_pk(id: Int!): Counter
}

"The return object from a filter query that supports a pagination token for paging through results"
type WeatherReadingConnection {
  "The list of items that matched the filter"
  items: [WeatherReading!]!
  "A pagination token to provide to subsequent pages of a query"
  endCursor: String
  "Indicates if there are more pages of items to return"
  hasNextPage: Boolean!
}

"The return object from a filter query that supports a pagination token for paging through results"
type CounterConnection {
  "The list of items that matched the filter"
  items: [Counter!]!
  "A pagination token to provide to subsequent pages of a query"
  endCursor: String
  "Indicates if there are more pages of items to return"
  hasNextPage: Boolean!
}

type Mutation {
  "Creates a new WeatherReading"
  createWeatherReading("Input representing all the fields for creating WeatherReading" item: CreateWeatherReadingInput!): WeatherReading
  "Updates a WeatherReading"
  updateWeatherReading("The ID of the item being updated." Id: Int! "Input representing all the fields for updating WeatherReading" item: UpdateWeatherReadingInput!): WeatherReading
  "Delete a WeatherReading"
  deleteWeatherReading("The ID of the item being deleted." Id: Int!): WeatherReading
  "Creates a new Counter"
  createCounter("Input representing all the fields for creating Counter" item: CreateCounterInput!): Counter
  "Updates a Counter"
  updateCounter("The ID of the item being updated." id: Int! "Input representing all the fields for updating Counter" item: UpdateCounterInput!): Counter
  "Delete a Counter"
  deleteCounter("The ID of the item being deleted." id: Int!): Counter
}

"Input type for creating WeatherReading"
input CreateWeatherReadingInput {
  "Input for field Date on type CreateWeatherReadingInput"
  Date: DateTime = "(getdate())"
  "Input for field TemperatureC on type CreateWeatherReadingInput"
  TemperatureC: Int!
  "Input for field Summary on type CreateWeatherReadingInput"
  Summary: String
}

"Input type for updating WeatherReading"
input UpdateWeatherReadingInput {
  "Input for field Date on type UpdateWeatherReadingInput"
  Date: DateTime
  "Input for field TemperatureC on type UpdateWeatherReadingInput"
  TemperatureC: Int
  "Input for field Summary on type UpdateWeatherReadingInput"
  Summary: String
}

"Input type for creating Counter"
input CreateCounterInput {
  "Input for field value on type CreateCounterInput"
  value: Int!
}

"Input type for updating Counter"
input UpdateCounterInput {
  "Input for field value on type UpdateCounterInput"
  value: Int
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
}

"The `Byte` scalar type represents non-fractional whole numeric values. Byte can represent values between 0 and 255."
scalar Byte

"The `Short` scalar type represents non-fractional signed whole 16-bit numeric values. Short can represent values between -(2^15) and 2^15 - 1."
scalar Short

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long

"IEEE 754 32 bit float"
scalar Single

"The built-in `Decimal` scalar type."
scalar Decimal

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime

scalar ByteArray

"LocalTime is an immutable struct representing a time of day, with no reference to a particular calendar, time zone or date."
scalar LocalTime

"The `@oneOf` directive is used within the type system definition language\n to indicate:\n\n - an Input Object is a Oneof Input Object, or\n - an Object Type's Field is a Oneof Field."
directive @oneOf on INPUT_OBJECT

directive @authorize("The name of the authorization policy that determines access to the annotated resource." policy: String "Roles that are allowed to access the annotated resource." roles: [String!] "Defines when when the resolver shall be executed.By default the resolver is executed after the policy has determined that the current user is allowed to access the field." apply: ApplyPolicy! = BEFORE_RESOLVER) repeatable on SCHEMA | OBJECT | FIELD_DEFINITION

"A directive to indicate the type maps to a storable entity not a nested entity."
directive @model("Underlying name of the database entity." name: String) on OBJECT

"A directive to indicate the relationship between two tables"
directive @relationship("The name of the GraphQL type the relationship targets" target: String "The relationship cardinality" cardinality: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

"A directive to indicate the primary key field of an item."
directive @primaryKey("The underlying database type." databaseType: String) on FIELD_DEFINITION

"The default value to be used when creating an item."
directive @defaultValue(value: DefaultValue) on FIELD_DEFINITION

"Indicates that a field is auto generated by the database."
directive @autoGenerated on FIELD_DEFINITION